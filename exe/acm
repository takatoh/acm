#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

require 'acm'
require 'thor'
require 'yaml'


class MyCLI < Thor

  DB_FILE = "#{ENV['HOMEDRIVE']}#{ENV['HOMEPATH']}/Documents/.accounts"

  desc "init", "Init database"
  def init
    if File.exist?(DB_FILE)
      puts "Database file is already exist."
    else
      save_db([])
    end
  end

  desc "add ACCOUNT", "Add ACCOUNT"
  def add(account)
    db = load_db
    ac = lookup(account, db)
    if ac
      puts "Account #{account} is already exist."
      exit 0
    end
    details = {}
    ac = {
      "account" => account,
      "details" => details
    }
    while true
      print "(acm) Key? "
      key = STDIN.gets.chomp.strip
      break if key.empty?
      print "(acm) Value? "
      value = STDIN.gets.chomp.strip
      details[key] = value
    end
    db << ac
    save_db(db)
  end

  desc "list", "List accounts"
  def list
    db = load_db
    db.each{|a| puts a['account'] }
  end

  desc "show ACCOUNT", "Show details of ACCOUNT"
  def show(target)
    db = load_db
    account = lookup(target.encode("utf-8"), db)
    if account
      puts "Account: #{account['account']}"
      account['details'].each do |key, val|
        puts "  #{key}: #{val}"
      end
    else
      puts "No such account: #{target}"
    end
  end

  desc "update ACCOUNT KEY VALUE", "Update value of KEY in ACCOUNT"
  def update(target, key, value)
    db = load_db
    account = lookup(target.encode("utf-8"), db)
    if account
      account['details'][key] = value
      save_db(db)
    else
      puts "No such account: #{target}"
    end
  end

  desc "remove_key ACCOUNT KEY", "Remove KEY and value in ACCOUNT"
  def remove_key(target, key)
    db = load_db
    account = lookup(target.encode("utf-8"), db)
    if account
      account['details'].delete(key)
      save_db(db)
    else
      puts "No such account: #{target}"
    end
  end

  desc "version", "Show version and exit"
  def version
    puts "v#{Acm::VERSION}"
  end


  private

  def load_db
    YAML.load_file(DB_FILE)
  end

  def lookup(target, db)
    db.find{|a| a['account'] == target }
  end

  def save_db(db)
    File.open(DB_FILE, "w"){|f| f.puts db.to_yaml }
  end

end   # of class MyCLI


MyCLI.start(ARGV)
