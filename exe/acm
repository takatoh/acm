#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

require "acm"
require "thor"
require "yaml"
require "clipboard"
require "fileutils"


class MyCLI < Thor

  DB_FILE = ENV['ACMDB'] || "#{ENV['HOME']}/.accounts"
  REFERENCE_KEY = "login-with"

  desc "init", "Init database"
  def init
    if File.exist?(DB_FILE)
      puts "Database file is already exist."
    else
      init_db
    end
  end

  desc "add ACCOUNT", "Add ACCOUNT"
  def add(account)
    db = load_db
    ac = lookup(account, db)
    if ac
      puts "Account #{account} is already exist."
      exit 0
    end
    details = {}
    ac = {
      "account" => account,
      "details" => details
    }
    while true
      print "(acm) Key? "
      key = STDIN.gets.chomp.strip
      break if key.empty?
      if key == "login-with"
        while true
          print "(acm) Value? "
          value = STDIN.gets.chomp.strip
          ref_account = lookup(value, db)
          if ref_account
            break
          else
            puts "#{value} not exist."
          end
        end
      else
        print "(acm) Value? "
        value = STDIN.gets.chomp.strip
      end
      details[key] = value
    end
    db << ac
    save_db(db)
  end

  desc "list", "List accounts"
  def list
    db = load_db
    db.sort_by{|a| a['account'] }.each do |a|
      if a['alias_for']
        puts "#{a['account']}  ->  #{a['alias_for']}"
      else
        puts a['account']
      end
    end
  end

  desc "search PATTERN", "Search accounts by PATTERN"
  def search(target)
    db = load_db
    accounts = search_accounts(target, db)
    if accounts.empty?
      puts "Not found: #{target}"
    else
      accounts.each do |a|
        if a['alias_for']
          puts "#{a['account']}  ->  #{a['alias_for']}"
        else
          puts a['account']
        end
      end
    end
  end

  desc "show [options] ACCOUNT", "Show details of ACCOUNT"
  option :pass, :type => :boolean, :aliases => "-p", :desc => "Show password"
  option :clip, :type => :boolean, :aliases => "-c", :desc => "Copy password to clipboard"
  option :track, :type => :boolean, :aliases => "-t", :desc => "Track referred account"
  def show(target)
    db = load_db
    account = lookup(target.encode("utf-8"), db)
    if account && account['alias_for']
      account = lookup(account['alias_for'], db)
      puts "NOTE: '#{target}' is alias for '#{account['account']}'."
    end
    if account
      puts "Account: #{account['account']}"
      print_details(account['details'], options[:pass])
      copy_password(account['details'], options[:clip])
      if options[:track] && account['details'][REFERENCE_KEY]
        ref_account = lookup(account['details'][REFERENCE_KEY], db)
        if ref_account
          puts "\nReference: #{ref_account['account']}"
          print_details(ref_account['details'], options[:pass])
          copy_password(ref_account['details'], options[:clip])
        else
          puts "\nReference not found: #{account['details'][REFERENCE_KEY]}"
        end
      end
    else
      puts "No such account: #{target}"
    end
  end

  desc "update ACCOUNT KEY VALUE", "Update value of KEY in ACCOUNT"
  def update(target, key, value)
    db = load_db
    account = lookup(target.encode("utf-8"), db)
    if account
      account['details'][key] = value
      save_db(db)
    else
      puts "No such account: #{target}"
    end
  end

  desc "remove-key ACCOUNT KEY", "Remove KEY and value in ACCOUNT"
  def remove_key(target, key)
    db = load_db
    account = lookup(target.encode("utf-8"), db)
    if account
      account['details'].delete(key)
      save_db(db)
    else
      puts "No such account: #{target}"
    end
  end

  desc "remove-account ACCOUNT", "Remove ACCOUNT"
  def remove_account(target)
    db = load_db
    account = lookup(target.encode("utf-8"), db)
    if account
      puts "Account: #{target}"
      account['details'].each do |k, v|
        puts "  #{k}: #{v}"
      end
      print "\nAre you sure?(y/n) "
      if STDIN.gets.chomp.downcase == "y"
        db.reject!{|a| a['account'] == target.encode("utf-8") }
        save_db(db)
      end
    else
      puts "No such account: #{target}"
    end
  end

  desc "rename-account OLD NEW", "Rename ACCOUNT"
  def rename_account(old, new)
    db = load_db
    account = lookup(old.encode("utf-8"), db)
    if account
      puts "Account: #{old} -> #{new}"
      account['account'] = new.encode("utf-8")
      save_db(db)
    else
      puts "No such account: #{old}"
    end
  end

  desc "env", "Display Environments"
  def env
    puts "Database file: #{DB_FILE}"
  end

  desc "alias ALIAS ACCOUNT", "Create an ALIAS for ACCOUNT"
  def alias_account(from, dest)
    db = load_db
    ac = lookup(dest.encode("utf-8"), db)
    if ac
      puts "Create alias: #{from} for #{dest}"
      al = {
        "account" => from,
        "alias_for" => ac['account']
      }
      db << al
      save_db(db)
    else
      puts "No such account: #{from}"
    end
  end

  desc "version", "Show version and exit"
  def version
    puts "v#{Acm::VERSION}"
  end


  private

  def init_db
    File.open(DB_FILE, "w"){|f| f.puts [].to_yaml }
    FileUtils.chmod(0600, DB_FILE)
  end

  def load_db
    begin
      YAML.load_file(DB_FILE)
    rescue
      puts "Error: Not found database file."
      exit(1)
    end
  end

  def lookup(target, db)
    db.find{|a| a['account'] == target }
  end

  def save_db(db)
    File.open(DB_FILE, "w"){|f| f.puts db.to_yaml }
  end

  def search_accounts(target, db)
    pattern = /#{target.encode("utf-8")}/i
    db.select{|a| pattern =~ a['account'].tr(" ", "") }
  end

  def print_details(details, pass = false)
    details.each do |key, val|
      if /pass/ =~ key && !pass
        puts "  #{key}: ******"
      else
        puts "  #{key}: #{val}"
      end
    end
  end

  def copy_password(details, clip = false)
    if clip
      password_key = details.keys.select{|k| /pass/ =~ k}.first
      Clipboard.copy(details[password_key])
    end
  end

end   # of class MyCLI


MyCLI.start(ARGV)
